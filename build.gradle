plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'io.freefair.lombok' version '8.1.0'
    id "com.google.protobuf" version "0.9.4"
}

group "org.polypheny"

archivesBaseName = "polypheny-jdbc-driver"
description = "A standards-compliant JDBC driver for Polypheny."

def versionMajor = 2
def versionMinor = 0
def versionQualifier = "-SNAPSHOT"
version = versionMajor + "." + versionMinor + versionQualifier

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

def protobufVersion = "3.23.0"
def grpcVersion = "1.55.1"


dependencies {
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: protobufVersion

    // Google Protocol Buffers (https://github.com/google/protobuf-gradle-plugin)
    //implementation group: "com.google.protobuf", name: "protobuf-gradle-plugin", version: "0.9.4"

    // https://mvnrepository.com/artifact/io.grpc/grpc-all
    implementation group: 'io.grpc', name: 'grpc-all', version: grpcVersion

    // https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    ////// APACHE COMMONS LANG
    implementation group: "org.apache.commons", name: "commons-lang3", version: "3.12.0"

    ////// LOGGING
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7' // License: MIT


    // --- Test Compile ---
    testImplementation group: "junit", name: "junit", version: '4.13.1'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.1.0'
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "io.freefair.lombok"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.google.protobuf"

def generatedDirName = "${project.buildDir}/generated"

// compile protos on build
build.dependsOn(generateProto)
delombok.dependsOn(generateProto)
sourcesJar.dependsOn(generateProto)
compileJava.dependsOn(generateProto)

protobuf {
    // Configure the protoc executable
    protoc {
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }
    // Locate the codegen plugins
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "${generatedDirName}/proto"
}


sourceSets {
    main {
        proto {
            srcDir "${protobuf.generatedFilesBaseDir}/proto/main/grpc"
            srcDir "${protobuf.generatedFilesBaseDir}/proto/main/java"
        }
        java {
            srcDirs = ["src/main/java", "build/generated-sources", 'build/generated/source/proto/main/grpc', 'build/generated/source/proto/main/java']
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}

/**
 * JARs*/
jar {
    manifest {
        attributes 'Manifest-Version': '1.0'
        attributes 'Copyright': 'The Polypheny Project'
        attributes 'Group': project.group
        attributes 'Name': project.name
        attributes 'Version': project.version
    }
}
/*
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}*/
shadowJar {
    archiveClassifier = ''
    mergeServiceFiles() // merge the META-INF/services/java.sql.Driver files
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'module-info.class', 'META-INF/services/com.fasterxml.jackson.core.*')
}

assemble.dependsOn shadowJar
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives shadowJar // fat jar which additionally contains all dependencies
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
            artifact source: sourcesJar, classifier: 'sources', extension: 'jar'
            artifact source: javadocJar, classifier: 'javadoc', extension: 'jar'
            pom {
                name = 'Polypheny JDBC Driver'
                description = 'A standards-compliant JDBC driver for Polypheny-DB. '
                url = 'https://polypheny.org/'
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                scm {
                    url = 'https://github.com/polypheny/Polypheny-JDBC-Driver'
                }
                developers {
                    developer {
                        id = 'polypheny'
                        name = 'Polypheny'
                        email = 'mail@polypheny.org'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/polypheny/polypheny-jdbc-driver"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
//task generatePom(group: 'publishing', dependsOn: "generatePomFileFor${project.name.capitalize()}Publication")

signing {
    required { gradle.taskGraph.hasTask("publish") }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.shadow
}

/**
 * IntelliJ*/
idea {
    project {
        settings {
            copyright {
                useDefault = "ApacheLicense"
                profiles {
                    ApacheLicense {
                        notice = 'Copyright 2019-$today.year The Polypheny Project\n' +
                                '\n' +
                                'Licensed under the Apache License, Version 2.0 (the \"License\");\n' +
                                'you may not use this file except in compliance with the License.\n' +
                                'You may obtain a copy of the License at\n' +
                                '\n' +
                                'http://www.apache.org/licenses/LICENSE-2.0\n' +
                                '\n' +
                                'Unless required by applicable law or agreed to in writing, software\n' +
                                'distributed under the License is distributed on an \"AS IS\" BASIS,\n' +
                                'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n' +
                                'See the License for the specific language governing permissions and\n' +
                                'limitations under the License.'
                        keyword = "Copyright"
                    }
                }
            }
        }
    }
}
