
plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'io.freefair.lombok' version '6.2.0'
}


repositories {
    mavenCentral()
    maven {
        // DBIS Nexus
        url "https://dbis-nexus.dmi.unibas.ch/repository/maven2/"
    }
    maven {
        url "https://clojars.org/repo/"
    }
}


group "org.polypheny"
archivesBaseName = "polypheny-jdbc-driver"
description = "A standards-compliant JDBC driver for Polypheny-DB."

def versionMajor = 1
def versionMinor = 5.2
def versionQualifier = ""
version = versionMajor + "." + versionMinor + versionQualifier


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}


configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}


def avaticaVersion = '1.17.2-POLYPHENY'

dependencies {
    ////// APACHE CALCITE AVATICA
    implementation group: "org.polypheny.avatica", name: "avatica-core", version: avaticaVersion  // License: Apache 2.0

    ////// APACHE COMMONS LANG
    implementation group: "org.apache.commons", name: "commons-lang3", version: "3.7"

    ////// LOGGING
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30' // License: MIT


    // --- Test Compile ---
    testImplementation group: "junit", name: "junit", version: "4.12"
    testImplementation group: "org.testng", name: "testng", version: "6.10"
    testImplementation group: "org.polypheny.avatica", name: "avatica-server", version: avaticaVersion
}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "build/generated-sources"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}


/**
 * JARs
 */
jar {
    manifest {
        attributes 'Manifest-Version': '1.0'
        attributes 'Copyright': 'The Polypheny Project'
        attributes 'Group': project.group
        attributes 'Name': project.name
        attributes 'Version': project.version
    }
}
/*task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}*/
shadowJar {
    archiveClassifier = ''
    mergeServiceFiles() // merge the META-INF/services/java.sql.Driver files
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'module-info.class', 'META-INF/services/com.fasterxml.jackson.core.*')
}

assemble.dependsOn shadowJar
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives shadowJar // fat jar which additionally contains all dependencies
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
}


publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
            artifact source: sourcesJar, classifier: 'sources', extension: 'jar'
            artifact source: javadocJar, classifier: 'javadoc', extension: 'jar'
            pom {
                name = 'Polypheny JDBC Driver'
                description = 'A standards-compliant JDBC driver for Polypheny-DB. '
                url = 'https://polypheny.org/'
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                scm {
                    url = 'https://github.com/polypheny/Polypheny-JDBC-Driver'
                }
                developers {
                    developer {
                        id = 'polypheny'
                        name = 'Polypheny'
                        email = 'mail@polypheny.org'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/polypheny/polypheny-jdbc-driver"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
//task generatePom(group: 'publishing', dependsOn: "generatePomFileFor${project.name.capitalize()}Publication")


signing {
    required { gradle.taskGraph.hasTask("publish") }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.shadow
}



/**
 * IntelliJ
 */
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")
    }
}
