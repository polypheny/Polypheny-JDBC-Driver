syntax = "proto3";

import "value.proto";
import "relational_frame.proto";
import "graph_frame.proto";
import "document_frame.proto";
import "meta.proto";

option java_multiple_files = true;
option java_package = "org.polypheny.jdbc.proto";
option java_outer_classname = "ProtoInterfaceProto";

package polypheny.protointerface;

// Functions provided by the proto interface
service ProtoInterface {
  // Meta functions
  rpc GetDbmsVersion(DbmsVersionRequest) returns (DbmsVersionResponse) {}
  rpc GetSupportedLanguages(LanguageRequest) returns (LanguageResponse) {}
  rpc GetTables(TablesRequest) returns (TablesResponse) {}
  rpc GetColumns(ColumnsRequest) returns (ColumnsResponse) {}
  rpc GetNamespaces(NamespacesRequest) returns (NamespacesResponse) {}
  rpc GetDatabases(DatabasesRequest) returns (DatabasesResponse) {}
  rpc GetTableTypes(TableTypesRequest) returns (TableTypesResponse) {}
  rpc GetPrimaryKeys(PrimaryKeysRequest) returns (PrimaryKeysResponse) {}
  rpc GetImportedKeys(ImportedKeysRequest) returns (ImportedKeysResponse) {}
  rpc GetExportedKeys(ExportedKeysRequest) returns (ExportedKeysResponse) {}
  rpc GetTypes(TypesRequest) returns (TypesResponse) {}
  rpc GetIndexes(IndexesRequest) returns (IndexesResponse) {}

  // Connection related
  rpc Connect(ConnectionRequest) returns (ConnectionReply) {}
  rpc CheckConnection(ConnectionCheckRequest) returns (ConnectionCheckResponse) {}

  // Unparameterized statements
  rpc ExecuteUnparameterizedStatement(UnparameterizedStatement) returns (stream StatementStatus) {}
  rpc ExecuteUnparameterizedStatementBatch(UnparameterizedStatementBatch) returns (stream StatementBatchStatus) {}

  // Parameterized statements
  rpc ExecuteParameterizedStatement(ParameterizedStatement) returns (stream StatementStatus) {}

  // Prepared Statements
  rpc PrepareStatement(PreparedStatement) returns (PreparedStatementSignature) {}
  rpc ExecutePreparedStatement(ParameterSet) returns (StatementResult){}

  // Results
  rpc FetchResult(FetchRequest) returns (Frame) {}

  // Transaction handling
  rpc CloseStatement(CloseStatementRequest) returns (CloseStatementResponse) {}
  rpc CommitTransaction(CommitRequest) returns (CommitResponse) {}
  rpc RollbackTransaction(RollbackRequest) returns (RollbackResponse) {}

  // Properties
  rpc StatementPropertyUpdate(StatementProperties) returns (StatementPropertyConfirmation) {}
}

message ConnectionCheckRequest{}

message ConnectionCheckResponse{}

message Property {
  oneof value {
    string string_value = 1;
    int32 int_value = 2;
    int64 long_value = 3;
    bool boolean_value = 4;
  }
}

message ConnectionRequest {
  int32 major_api_version = 1;
  int32 minor_api_version = 2;
  string client_uuid = 3;
  map<string, string> connection_properties = 4;
}

message ConnectionReply {
  bool is_compatible = 1;
  uint32 major_api_version = 2;
  uint32 minor_api_version = 3;
}

message CommitRequest {}
message CommitResponse{}

message RollbackRequest {}
message RollbackResponse{}

message StatementBatchStatus {
  int32 batchId = 1;
  repeated int64 scalars = 2;
}

message StatementStatus {
  int32 statementId = 1;
  optional StatementResult result = 2;
}

message PreparedStatementSignature{
  int32 statementId = 1;
  repeated ParameterMeta parameter_metas = 2;
}

message FetchRequest {
  int32 statement_id = 1;
  int64 offset = 2;
  optional int32 fetch_size = 3;
}

message UnparameterizedStatement {
  string statement_language_name = 1;
  string statement = 2;
}

message UnparameterizedStatementBatch {
  repeated UnparameterizedStatement statements = 1;
}

message CloseStatementRequest {
  int32 statement_id = 1;
}

message CloseStatementResponse {
}

message StatementProperties{
  int32 statement_id = 1;
  map<string, string> properties = 2;
}

message StatementPropertyConfirmation {
}

message ParameterizedStatement {
  string statement_language_name = 1;
  string statement = 2;
  map<string, ProtoValue> values = 3;
  bool expects_result = 4;
}

message ParameterMeta {
  int32 precision = 1;
  int32 scale = 2;
  string type_name = 3;
  string parameter_name = 4;
  string name = 5;
}

message PreparedStatement {
  string statement_language_name = 1;
  string statement = 2;
  bool expects_result = 3;
}

message ParameterSet {
  int32 statementId = 1;
  map<string, ProtoValue> values = 2;
}

message ParameterBatch {
  int32 statementId = 1;
  //repeated map<string, ProtoValue> valuesMaps = 2;
}

message StatementResult {
  int64 scalar = 1;
  optional Frame frame = 2;
}

message Frame {
  int64 offset = 1;
  bool isLast = 2;
  oneof result {
    RelationalFrame relational_frame = 3;
    GraphFrame graph_frame = 4;
    DocumentFrame document_frame = 5;
  }
}

message ValueMap {
  map<string, ProtoValue> values = 1;
}
