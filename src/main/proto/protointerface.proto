syntax = "proto3";
import "value.proto";
import "frame.proto";

option java_multiple_files = true;
option java_package = "org.polypheny.jdbc.proto";
option java_outer_classname = "ProtoInterfaceProto";
option objc_class_prefix = "PI";

package polypheny.protointerface;

// Functions provided by the proto interface
service ProtoInterface {
  rpc Connect(ConnectionRequest) returns (ConnectionReply) {}
  rpc GetSupportedLanguages(LanguageRequest) returns (SupportedLanguages) {}
  rpc ExecuteUnparameterizedStatement(UnparameterizedStatement) returns (stream StatementStatus) {}
  rpc ExecuteParameterizedStatement(ParameterizedStatement) returns (stream StatementStatus) {}
  rpc PrepareStatement(PreparedStatement) returns (stream StatementStatus) {}
  rpc FetchResult(FetchRequest) returns (Frame) {}
  rpc CloseStatement(CloseStatementRequest) returns (CloseStatementResponse) {}
  rpc StatementPropertyUpdate(StatementProperties) returns (StatementPropertyConfirmation) {}
}

message ConnectionRequest {
  int32 major_api_version = 1;
  int32 minor_api_version = 2;
  string client_uuid = 3;
  map<string, string> connection_properties = 4;
}

message ConnectionReply {
  bool is_compatible = 1;
  uint32 major_api_version = 2;
  uint32 minor_api_version = 3;
}

message LanguageRequest {}

message SupportedLanguages {
  repeated string language_names = 1;
}

message StatementStatus {
  int32 statementId = 1;
  optional StatementResult result = 2;
}

message FetchRequest {
  int32 statement_id = 1;
  int64 offset = 2;
}

message UnparameterizedStatement {
  string statement_language_name = 1;
  string statement = 2;
  bool expects_result = 4;
}

message CloseStatementRequest {
  int32 statementId = 1;
}

message CloseStatementResponse {
}

message StatementProperties{
  int32 statementId = 1;
  map<string, string> properties = 2;
}

message StatementPropertyConfirmation {
}

message ParameterizedStatement {
  string statement_language_name = 1;
  string statement = 2;
  map<string, ProtoValue> values = 3;
  bool expects_result = 4;
}

message PreparedStatement {
  string statement_language_name = 1;
  string statement = 2;
  bool expects_result = 3;
}

message StatementResult {
  oneof result {
    int64 row_count = 1;
    Frame frame = 2;
    NoResult no_result = 3;
  }
}

message NoResult {
}

message ValueMap {
  map<string, ProtoValue> values = 1;
}
