syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.polypheny.jdbc.proto";
option java_outer_classname = "ProtoInterfaceProto";
option objc_class_prefix = "PI";

package polypheny.protointerface;

// Functions provided by the proto interface
service ProtoInterface {
  rpc Connect(ConnectionRequest) returns (ConnectionReply) {}
  // prepare and execute 1..n statements with the provided values
  rpc ExecuteParameterizedStatements(ParameterizedStatementBatch) returns (QueryResult) {}
  // prepare a single statement
  rpc PrepareStatement(PreparedStatement) returns (QueryResult) {}
  // execute a previously prepared statement with the values provided
  rpc ExecutePreparedStatement(ValuesBatch) returns (QueryResult) {}
}

message ConnectionRequest {
  int32 major_api_version = 1;
  int32 minor_api_version = 2;
  string client_uuid = 3;
  map<string, string> connection_properties = 4;
}

message ConnectionReply {
  bool is_compatible = 1;
  uint32 major_api_version = 2;
  uint32 minor_api_version = 3;
}

message AvailableLanguages {
  repeated string language_names = 1;
}

// The value set required for one execution of a statement
message Values {
  /* TODO: implementation of values to be inserted into statements
   * Idea: list of value wrapper according to polyvalue / new stuff from refactor branch
   */
}

message ValuesBatch {
  repeated Values value_sets = 1;
}

// A statement in a specific query language and its values
message ParameterizedStatement {
  string statement_language_name = 1;
  string statement = 2;
  map<string, string> statement_properties = 3;
  ValuesBatch value_batch = 4;
}

message ParameterizedStatementBatch {
  repeated ParameterizedStatement parameterized_statement = 1;
}

message PreparedStatement {
  string statement_language_name = 1;
  string statement = 2;
}

message QueryResult {
  oneof result {
    bool no_result = 1;
    Frame frame = 2;
    int64 row_count = 4;
  }
}

message Frame {

}
