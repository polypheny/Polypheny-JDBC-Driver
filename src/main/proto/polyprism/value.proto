syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.polypheny.db.protointerface.proto";
option java_outer_classname = "ProtoValueProto";

package polypheny.protointerface;

// Specifies the type of a proto value. This enum contains a value for each datatype supported by the DBMS.
enum ProtoPolyType {
  // Default unspecified type.
  UNSPECIFIED = 0;
  // Boolean type, true or false.
  BOOLEAN = 1;
  // 8-bit integer.
  TINYINT = 2;
  // 16-bit integer.
  SMALLINT = 3;
  // 32-bit integer.
  INTEGER = 4;
  // 64-bit integer.
  BIGINT = 5;
  // Arbitrary precision number.
  DECIMAL = 6;
  // Single precision floating point.
  REAL = 7;
  // Alias for REAL.
  FLOAT = 8;
  // Double precision floating point.
  DOUBLE = 9;
  // Date value.
  DATE = 10;
  // Time value without timezone.
  TIME = 11;
  // Time with local timezone.
  TIME_WITH_LOCAL_TIME_ZONE = 12;
  // Timestamp without timezone.
  TIMESTAMP = 13;
  // Timestamp with local timezone.
  TIMESTAMP_WITH_LOCAL_TIME_ZONE = 14;
  // Interval in seconds.
  INTERVAL_SECOND = 15;
  // Interval in minutes to seconds.
  INTERVAL_MINUTE_SECOND = 16;
  // Interval in minutes.
  INTERVAL_MINUTE = 17;
  // Interval in hours to seconds.
  INTERVAL_HOUR_SECOND = 18;
  // Interval in hours to minutes.
  INTERVAL_HOUR_MINUTE = 19;
  // Interval in hours.
  INTERVAL_HOUR = 20;
  // Interval in days to seconds.
  INTERVAL_DAY_SECOND = 21;
  // Interval in days to minutes.
  INTERVAL_DAY_MINUTE = 22;
  // Interval in days to hours.
  INTERVAL_DAY_HOUR = 23;
  // Interval in days.
  INTERVAL_DAY = 24;
  // Interval in months.
  INTERVAL_MONTH = 25;
  // Interval in years to months.
  INTERVAL_YEAR_MONTH = 26;
  // Interval in years.
  INTERVAL_YEAR = 27;
  // Fixed length character string.
  CHAR = 28;
  // Variable length character string.
  VARCHAR = 29;
  // Binary data.
  BINARY = 30;
  // Variable length binary data.
  VARBINARY = 31;
  // Null type.
  NULL = 32;
  // Array type.
  ARRAY = 33;
  // Map type.
  MAP = 34;
  // Document type.
  DOCUMENT = 35;
  // Graph type.
  GRAPH = 36;
  // Graph node type.
  NODE = 37;
  // Graph edge type.
  EDGE = 38;
  // Graph path type.
  PATH = 39;
  // Image data type.
  IMAGE = 40;
  // Video data type.
  VIDEO = 41;
  // Audio data type.
  AUDIO = 42;
  // File data type.
  FILE = 43;
  // Distinct type (a named scalar type).
  DISTINCT = 44;
  // Structured type.
  STRUCTURED = 45;
  // Row type.
  ROW = 46;
  // Other types not specifically listed.
  OTHER = 47;
  // Cursor type.
  CURSOR = 48;
  // Column list type.
  COLUMN_LIST = 49;
  // Dynamic star type (used for dynamic column projection).
  DYNAMIC_STAR = 50;
  // Geometric data type.
  GEOMETRY= 51;
  // Symbol type.
  SYMBOL = 52;
  // JSON data type.
  JSON = 53;
  // Multiset type.
  MULTISET = 54;
  // Any type (a type that can hold any value).
  ANY = 55;
  // User-defined type.
  USER_DEFINED_TYPE = 56;
  // Row identifier type.
  ROW_ID = 57;
  // Text data type.
  TEXT = 58;
}


/*
ProtoValue represents a single value supported by the DBMS.
It contains a wide range of fields each corresponding to one supported data type.
Only one field can be set at a time.
*/
message ProtoValue {
  oneof value {
    // Field used to represent a boolean. If set, all other fields must be empty.
    ProtoBoolean boolean = 1;
    // Field used to represent an integer. If set, all other fields must be empty.
    ProtoInteger integer = 2;
    // Field used to represent a long integer. If set, all other fields must be empty.
    ProtoLong long = 3;
    // Field used to represent a BigDecimal. If set, all other fields must be empty.
    ProtoBigDecimal big_decimal = 12;
    // Field used to represent a floating-point number. If set, all other fields must be empty.
    ProtoFloat float = 7;
    // Field used to represent a double-precision floating-point number. If set, all other fields must be empty.
    ProtoDouble double = 6;
    // Field used to represent a date. If set, all other fields must be empty.
    ProtoDate date = 5;
    // Field used to represent a time. If set, all other fields must be empty.
    ProtoTime time = 9;
    // Field used to represent a timestamp. If set, all other fields must be empty.
    ProtoTimestamp timestamp = 10;
    // Field used to represent a time interval. If set, all other fields must be empty.
    ProtoInterval interval = 13;
    // Field used to represent a string. If set, all other fields must be empty.
    ProtoString string = 8;
    // Field used to represent binary data. If set, all other fields must be empty.
    ProtoBinary binary = 4;
    // Field used to represent a null value. If set, all other fields must be empty.
    ProtoNull null = 11;
    // Field used to represent a list. If set, all other fields must be empty.
    ProtoList list = 16;
    // Field used to represent a map. If set, all other fields must be empty.
    ProtoMap map = 17;
    // Field used to represent a document. If set, all other fields must be empty.
    ProtoDocument document = 18;
  }
}


/*
Represents a boolean value.
*/
message ProtoBoolean {
  // A boolean value.
  bool boolean = 1;
}

/*
Represents a 32-bit integer value.
*/
message ProtoInteger {
  // A 32-bit integer value.
  int32 integer = 1;
}

/*
Represents a 64-bit long integer value.
*/
message ProtoLong {
  // A 64-bit long integer value.
  int64 long = 1;
}

/*
Represents a BigDecimal value with specified precision and scale.
*/
message ProtoBigDecimal {
  // The scale of the BigDecimal.
  uint32 scale = 1;
  // The precision of the BigDecimal.
  uint32 precision = 2;
  // The unscaled value of the BigDecimal.
  bytes unscaled_value = 3;
}

/*
Represents a single precision floating point number.
*/
message ProtoFloat {
  // A single precision floating point number.
  float float = 1;
}

/*
Represents a double precision floating point number.
*/
message ProtoDouble {
  // A double precision floating point number.
  double double = 1;
}

/*
Represents a date as a 64-bit integer.
*/
message ProtoDate {
  // Days since epoch till start of the specified day.
  int64 date = 1;
}

/*
Represents a time value.
*/
message ProtoTime {
  // The value of the time
  int32 time = 1;
}

/*
Represents a timestamp value.
*/
message ProtoTimestamp {
  // The timestamp value in milliseconds since epoch.
  int64 timestamp = 1;
}

/*
Represents an interval value.
*/
message ProtoInterval {
  oneof unit {
    int64 milliseconds = 1;
    int64 months = 2;
  }
}

/*
Represents a string value.
*/
message ProtoString {
  // A string value.
  string string = 1;
}

/*
Represents binary data.
*/
message ProtoBinary {
  // Binary data.
  bytes binary = 1;
}

/*
Represents a null value. This message doesnâ€™t contain any fields.
*/
message ProtoNull {
}

/*
Represents a list of ProtoValue items.
*/
message ProtoList {
  // The list of ProtoValue items.
  repeated ProtoValue values = 1;
}

/*
Represents a map of ProtoEntry items.
*/
message ProtoMap {
  // The list of ProtoEntry items forming the map.
  repeated ProtoEntry entries = 1;
}

/*
Defines a key-value pair using ProtoValue for both key and value.
*/
message ProtoEntry {
  // The key of the entry.
  ProtoValue key = 1;
  // The value of the entry.
  ProtoValue value = 2;
}

/*
Represents a document consisting of multiple ProtoEntry items.
*/
message ProtoDocument {
  // The list of ProtoEntry items forming the document.
  repeated ProtoEntry entries = 1;
}